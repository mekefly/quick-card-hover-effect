import { WTSC } from './WTSC';
import { WTSCOptions } from './option';
import { TypeParsers, TypeParsersOfReplaceUpdata } from '../../parsers/typeParsers/TypeParsersInterface';
import { BaseParsersInterface } from '../../parsers/baseParsers/BaseParsers';
/**
 * 是一个WTSC对象返回true
 * @author meke
 * @export
 * @param {unknown} v
 * @return {*}  {v is WTSC<any>}
 */
export declare function isWTSC(v: unknown): v is WTSC<any, any>;
export declare type BaseWTSC<Options extends WTSCOptions> = WTSC<Options, TypeParsers<BaseParsersInterface<Options>>>;
export declare function defBaseWTSC<The extends object = {}>(options: Partial<WTSCOptions<The>>): BaseWTSC<WTSCOptions<The>>;
export declare type TypeWTSC<Options extends WTSCOptions> = WTSC<Options, TypeParsersOfReplaceUpdata<TypeWTSC<Options>>>;
export declare type DefaultTypeWTSC<Options extends WTSCOptions> = WTSC<Options, TypeParsers<TypeWTSC<Options>>>;
export declare function defTypeWTSC<The extends object = {}>(options?: Partial<WTSCOptions<The>>): TypeWTSC<WTSCOptions<The>>;
/**
 * 生成wtsc
 * @author meke
 * @export
 * @template Options
 * @param {Options} [defWTSCAPIOptions={} as any as Options]
 * @return {*}  {WTSC<Options>}
 */
export declare function defWTSC<The extends object = {}>(wtscOptions?: Partial<WTSCOptions<The>>): DefaultTypeWTSC<WTSCOptions<The>>;
//# sourceMappingURL=api.d.ts.map