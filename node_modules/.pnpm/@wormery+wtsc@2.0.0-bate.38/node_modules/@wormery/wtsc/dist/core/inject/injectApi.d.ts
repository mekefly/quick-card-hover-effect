import { GetObjInjectReturn, ObjInjectKey } from './types';
import { InjectKey } from './injectKey';
export interface InjectFunction {
    /**
     * inject 是一个注入器， 可以简单的注入需要的内容
     * @author meke
     * @template R
     * @param {InjectKey<R>} injectKey
     * @return {*}  {(R | undefined)} 没有传默认值可能会返回undefined
     * @memberof Inject
     */
    <Value = any, IsAssertionExisted extends boolean = false>(injectKey: InjectKey<Value, IsAssertionExisted>): Required<InjectKey<Value, IsAssertionExisted>>['value'];
    /**
     * inject 是一个注入器， 可以简单的注入需要的内容
     * @author meke
     * @template R
     * @param {InjectKey<R>} injectKey
     * @param {R} defau 传入默认值不会返回undefined
     * @return {*}  {R}
     * @memberof Inject
     */
    <R = any>(injectKey: InjectKey<R, any>, defau: R): R;
}
export declare type DepInjectFunction = <ObjKey extends ObjInjectKey>(objKey: ObjKey) => GetObjInjectReturn<ObjKey>;
export declare const inject: InjectFunction;
export declare const depInject: DepInjectFunction;
//# sourceMappingURL=injectApi.d.ts.map