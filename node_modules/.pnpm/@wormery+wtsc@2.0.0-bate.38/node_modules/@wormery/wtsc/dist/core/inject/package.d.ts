export declare type Pack = <Value = any, Pack = any>(value: Value, pack?: Pack) => Pack;
export declare type Unpack = <Value = any, Pack = any>(pack: Pack) => Value;
export declare let pack: Pack;
export declare let unpack: Unpack;
declare type RefFun = <T>(value: T) => Ref<T>;
interface Ref<T> {
    value: T;
}
/**
 * 传入一个ref，定义ref打包器
 * @author meke
 * @export
 * @param {RefFun} _ref
 * @return {*}  {void}
 */
export declare function defRefPackager(_ref: RefFun): void;
export declare function defUseStatePackager(useState: RefFun): void;
export declare function turnOffAutoImportWarning(): void;
export {};
//# sourceMappingURL=package.d.ts.map