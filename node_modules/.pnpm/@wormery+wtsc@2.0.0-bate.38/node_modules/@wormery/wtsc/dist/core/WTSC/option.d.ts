import { WTSC } from './WTSC';
import { ThemeOptions } from '../theme/option';
export interface WTSCOptions<The extends object = {}> extends ThemeOptions<The> {
    name?: string;
}
export declare type DefWTSC<Options extends WTSCOptions<Options>> = (options?: WTSCOptions<Options>) => WTSC<Options, {}>;
export declare type Get$defWTSCOfWTSCOptions<Options extends WTSCOptions<Options>> = (opt?: any) => WTSC<Options, {}>;
export declare type Get$WTSC<Options extends WTSCOptions<Options>> = WTSC<Options, {}>;
/**
 * Option api 类型
 * @author meke
 * @export
 * @interface DefWTSCAPIOptions
 * @extends {WTSCOptions<MyParsers>}
 * @template MyParsers
 */
export interface DefWTSCAPIOptions<Options extends DefWTSCAPIOptions<Options>> extends WTSCOptions<Options> {
}
export declare type Get$defWTSCOfWTSCAPI<Options extends WTSCOptions<Options>> = (opt?: WTSCOptions<Options>) => WTSC<Options, {}>;
export interface WTSCAPI<Options extends WTSCOptions<Options>> extends WTSCOptions<Options> {
    defWTSC: (opt?: WTSCOptions<Options>) => WTSC<Options, {}>;
}
//# sourceMappingURL=option.d.ts.map