import { OutValue } from '../CSSValue/index';
export declare function newClass<T extends new (...rest: A) => R, A extends any[], R>(Class: T): (...rest: A) => R;
/**
 *
 * @param v
 * @param handle
 * @param memory
 * @returns
 */
export declare function depTraversal(v: object, handle: (n: any) => {}, memory?: WeakMap<any, any>): void;
/**
 * 生成一个hash
 * @author meke
 * @export
 * @param {number} [length=6]
 * @param {number} [base=36]
 * @return {*}  {string}
 */
export declare function genHash(length?: number, base?: number): string;
export declare const isBrowser: boolean;
export declare function mixin<O1 extends object, O2 extends object>(o1: O1, o2: O2): Merge<O1, O2>;
export declare type Merge<X extends object, Y extends object> = {
    [k in keyof X | keyof Y]: k extends keyof X ? X[k] : k extends keyof Y ? Y[k] : never;
};
export declare function setPrototypeOf<T extends object, P extends object>(o: T, parent: P): Merge<T, P>;
export declare function isOutValue(v: unknown): v is OutValue;
export declare function genPack(prefix: string, suffix: string): (v: string) => string;
//# sourceMappingURL=utils.d.ts.map